<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>Kiko</title>
		<link>//kiko.gfjaru.com</link>
		<atom:link href="//kiko.gfjaru.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>My First Code Camp</title>
        <description>&lt;p&gt;
After hearing about a code camp on Python &lt;a href=&quot;http://docs.fabfile.org/en/1.10/&quot;&gt;fabric&lt;/a&gt; and as a developer, I owe it to myself to join. I&#39;ve seen a lot of PyCon videos and I had an impression or expectation what a code camp would be or better. It was held in an usual corporate venue and you knew it was a little of recruitment as well but you can expect that when they pay for your meal and knowledge.
&lt;/p&gt;

&lt;p&gt;
So what happened there? I went there, I sat down and listened to what appears more of a class lecture than a code camp; I took their written exam, I stood up, got my photo taken, and I had to leave like everyone else did. Wait... what happened? Where is the code? Where are the people?
&lt;/p&gt;

&lt;p&gt;
Suffice to say, my expectations were not met. I was expecting to code, I was expecting to chat, I think it was just a class. Looking back on it, it may have been just a recruitment event with a nice hook. For my first time, I hoped it would have been like the one I though of.
&lt;/p&gt;

&lt;p&gt;
So here are the things I thought of what was wrong with the event I attended.
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Technical difficulties - This is just a minor point I can understand. During the lecture, the projector kept turning off and on. If I was the speaker, I would be very nervous that my talk had problems but as the audience it would break the rhythm of the connection with the speaker. Little annoyances add up to a big thing.&lt;/li&gt;
&lt;li&gt;No code - They told us to bring our laptops but apparently it wasn&#39;t needed at all for the event. I was thinking that we were going to connect to a network and start accessing there machines as a way to show how &lt;code&gt;fabric&lt;/code&gt; works. What we got was an PDF file that one can read from start to end without loss of knowledge. Sure, it had snippets but only snippets. I expected to be grouped and do some nifty scripts to make it stick.&lt;/li&gt;
&lt;li&gt;Prize money - The weird thing about the lecture is that there was a quiz at the end of it with some considerable money offered to whoever scores highest and fastest, in that order. But even weirder is that the organizers kept pressing the point about the money and the money. It was as if the reason we went there was for the money and not the code. There was even a review session at the end just for everyone to be on par, so what&#39;s the point of being attentive when all you need is memory? On the paper they gave the answer, I wrote = I am not a whore=; I felt they were trying to pay me of to compensate for the lack of content.&lt;/li&gt;
&lt;li&gt;Speaker - I felt the speaker wasn&#39;t really as a Python enthusiast as I thought he would be. I asked if he knew the &lt;code&gt;request&lt;/code&gt; library and he didn&#39;t. I can&#39;t really judge him but almost every Python programmer knows that wonderful library to automate and get stuff. But from that, I think he was just using Python to get the job done not because it&#39;s Python. Not judging him for the lack of enthusiasm at that day, he might had a bad day and couldn&#39;t show his great love for it. What I felt sad of is that I feel he wasn&#39;t in control of the room, it was the recruitment people. I felt he was just a speaker, a man talking.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
This is what I just felt, I would love to be told wrong. I don&#39;t hate or dislike the event but I really felt it could have been better. Here are some things that I thought that could be done to make it better.
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Show me the code - I hoped the speaker would tell us a code story, what was his problem and how we used this wonderful library and made him cool and got a lot of praise. Hold back your applause gentlemen. Story telling draws people in whereas a vanilla lecture does less. How it relates to the speaker then to the audience might be better.&lt;/li&gt;
&lt;li&gt;Team competition - Instead of a written exam, an exercise that groups the gang into  different pieces of a problem. Say one does checks if the servers are up, others check if there is a missing piece of software, one does something neat and they combine their solution into one epic or nice package. It makes it coherent, relevant and a little exciting which group gets the job done quickest.&lt;/li&gt;
&lt;li&gt;Hardware - Instead of giving away money, it could have been better place to invest that in hardware to be used for the event. Hell, they could use a Raspberry Pi to simulate cloud computing with a small cluster. If the lure of the event is money or extrinsic, the motivation would less than if they had fun doing the camp with people and say this company hosts some nice event, maybe I would like to join them. Money or motivation, the money could have given them more mileage.&lt;/li&gt;
&lt;li&gt;After party or mixers - After the event, they could entice people to stay and then talk to them. Not only would people hook up, the recruiters can talk to the people their as well. Everyone gets to talk and listen and have some new friends while they were at it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
This is my first time but I can this would have made it better form me. The way it ended, it seems to be more an recruitment event than a developer event. If they wanted better retention, they have to show the community that this company knows there code and can show it. For me, it would be a win-win for both the coders and company: happy coders and better branding for the company. I believe everyone could be happy even if it was a code camp or a recruitment drive.
&lt;/p&gt;

&lt;p&gt;
Again, I am sad to say it wasn&#39;t as good as I thought but I am not saying they should rot in hell. I do appreciate more events that brings people together albeit it might have been the money. I do really want to attend more of this events even if it was hosted by the same company despite my discouraging first experience with it. As a last word for the code camp, I want to say thanks although it could have been better for everyone.
&lt;/p&gt;

&lt;p&gt;
Actually, my objective for the code camp was not really to learn anything but to learn about the community or if there any &lt;code&gt;Emacs&lt;/code&gt; users in the group. I mostly found &lt;code&gt;Windows&lt;/code&gt; users and only a few &lt;code&gt;Mac&lt;/code&gt; users. I might have only been the &lt;code&gt;Linux&lt;/code&gt; user there, I pray not. I really wish I could have talked to the speaker at the end, I wanted to ask him if he loved Python, why he works there, why make that talk, what inspires him. In short, what motivates him and why he codes.
&lt;/p&gt;

&lt;p&gt;
The week after this, I am going to attend a community meeting in another known company but this time for Javascript. I don&#39;t know if it another recruitment drive but I want to see the community. I think developers are glued together by code and their experience with it. In that sense for me, I want to see how people code and how it affects them. Code and community, I want to see more of it.
&lt;/p&gt;
</description>
				<pubDate>Sat, 12 Mar 2016 00:00:00 +0800</pubDate>
				<link>//kiko.gfjaru.com/2016/03/12/My-First-Code-Camp/</link>
				<guid isPermaLink="true">//kiko.gfjaru.com/2016/03/12/My-First-Code-Camp/</guid>
			</item>
		
			<item>
				<title>(Excel)Spreadsheets As Tools</title>
        <description>&lt;p&gt;
I recently watched the video &lt;a href=&quot;https://www.youtube.com/watch?v=0CKru5d4GPk&quot;&gt;Spreadsheets For Developers&lt;/a&gt; and it echoed within my experiences developing tools within Microsoft Excel.
&lt;/p&gt;

&lt;p&gt;
Up front, I don&#39;t really like Excel or spreadsheets in general as an tool or language for the following reasons.
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Dealing with formulas is messy - Making branching or stateful logic is dirty. Wrapping a lot of &lt;code&gt;ifs&lt;/code&gt; in one line is a lot dirtier than a Lisp language can pull off.&lt;/li&gt;
&lt;li&gt;The language is restrictive - Class, object, functional. The support for any of these styles is close to &lt;code&gt;nil&lt;/code&gt; or just annoying. Procedural is the only style.&lt;/li&gt;
&lt;li&gt;No package manager - There are third party libraries but they come in the form of &lt;code&gt;ActiveX&lt;/code&gt; or &lt;code&gt;OLE&lt;/code&gt; or whatnot. Point is if you make a module, good luck copy pasting the code from one worksheet to the other.&lt;/li&gt;
&lt;li&gt;There is only one IDE - Since all of the code is within Excel itself, the code cannot be read by others such as &lt;code&gt;Emacs&lt;/code&gt; or just plain &lt;code&gt;Notepad&lt;/code&gt;. This means your IDE is whatever the Excel gives you. Very restrictive.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I have more beef with Excel as a language but not as a tool. I do admit after listening to the talk it, it left me with the following thoughts.
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Functional Cells - Since cells don&#39;t contain state mutations, the cells are considered stateless which is in direct contrast with the macro language.&lt;/li&gt;
&lt;li&gt;REPL - The cells themselves act like a REPL where you type a formula and a result comes out. I do admit this is a nice feature&lt;/li&gt;
&lt;li&gt;Lingua Franca - Everyone knows spreadsheets. Instead of making expensive code, one could see results immediately and cheaply using spreadsheets instead.&lt;/li&gt;
&lt;li&gt;The Same Developer Problems - Debugging, refactoring, validation. It seems so similar.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The talk focused more on the sheet side, not on the macro language which developers such as myself feel at hell with. Despite all my moaning about how crappy the language is I can&#39;t believe I did the following things along with some shameless self-reference.
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Data Checker - My first exposure to heavy Excel programming. The idea is to validate an Excel UI export  with an SQL query export. I learned first how to do fuzzy matching with Excel which I picked up from Python&#39;s &lt;code&gt;fuzzywuzzy&lt;/code&gt; library. This is where my weird journey started.&lt;/li&gt;
&lt;li&gt;Export/Import Tool(&lt;a href=&quot;https://github.com/FrancisMurillo/xlwheat&quot;&gt;xlwheat&lt;/a&gt;) - After developing for quite some time, I lamented a lack of VCS for Excel specially when you&#39;re on a team project. Sharing code is copy pasting  modules and diffing them. There has to be a better way. Thankfully, Excel allows you to import and export modules albeit one at a time. I automated this process and created an import/export tool which would be linked to a Git repository. That is somewhat cool but still awkward.&lt;/li&gt;
&lt;li&gt;Unit Test Framework(&lt;a href=&quot;https://github.com/FrancisMurillo/xlvase&quot;&gt;xlvase&lt;/a&gt;) - I&#39;ve been making modules left and right mostly recreating utilities that a lot of languages implemented. I also lamented the lack of unit test tools to at least have some testing capability. So I made an unit test framework before making new code to verify all that I&#39;ve done. It wasn&#39;t perfect but I felt pretty giddy about doing it but still awkward.&lt;/li&gt;
&lt;li&gt;Package Manager(&lt;a href=&quot;https://github.com/FrancisMurillo/xlchip&quot;&gt;xlchip&lt;/a&gt;) - Okay, you know where this is going. Since there is none, I made one. It&#39;s not perfect as usual and it doesn&#39;t have a cool online repository like &lt;code&gt;MELPA&lt;/code&gt; or &lt;code&gt;SourceForge&lt;/code&gt; but now I can share my code like a boss or monkey. Still awkward&lt;/li&gt;
&lt;li&gt;Functional Support(&lt;a href=&quot;https://github.com/FrancisMurillo/xlfn&quot;&gt;xlfn&lt;/a&gt;) - I started getting interested with functional programming at the time and wished with all my heart that Excel at least support. Problem is that Excel doesn&#39;t have functions as first class objects. My workaround? Make pseudo named lambdas that can be invoked by name using &lt;code&gt;Application.Run&lt;/code&gt;. With that I have pseudo functions that can compose, curry and have also quasi closure. Awesome and awkward.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
So in hindsight, Excel as a language sucks, Excel with development support sucks, but why the hell did I still continue making these tools if it really sucked? Before I started with all of it, I thought of Excel as an inferior language, a language for the masses, a language not worthy of recognition. I also thought of Javascript as an inferior language due to its weird design decisions. But despite that, they have their good parts. If you code with guidelines within the language construct you can still make kickass modules like I did but still awkward. Hmm.. perhaps I made these continued because I could learn more about making those tools instead of just using it and it was a wonderful journey.
&lt;/p&gt;

&lt;p&gt;
As it stands today, I can no longer work with Excel since I am on a Linux machine which I don&#39;t lament. If &lt;code&gt;Excel&lt;/code&gt; were open source, I would go back and recheck my code and see what else I can do like the following.
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Lisp Interpreter - The language itself sucks as I have said, but can we put another language within it? Easiest to implement is a Lisp interpreter. Problem is how are modules going to be stored and there is no &lt;code&gt;paredit&lt;/code&gt; to balance those expression. One thing I thought of is putting files externally and having a load path of sorts like in Python or Java. I really wish I could done this last.&lt;/li&gt;
&lt;li&gt;Window Shell - Like in Python &lt;code&gt;sh&lt;/code&gt;, I would like to see how you can access the filesystem using Excel. This would open up the ability to look at external files and let other modules parse it. It would be great.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Spreadsheet is indeed code. It&#39;s just nice that someone made a thesis and talk about it to rectify my actions of being obsessed with a language such as Excel.
&lt;/p&gt;
</description>
				<pubDate>Sat, 05 Mar 2016 00:00:00 +0800</pubDate>
				<link>//kiko.gfjaru.com/2016/03/05/(Excel)Spreadsheets-As-Tools/</link>
				<guid isPermaLink="true">//kiko.gfjaru.com/2016/03/05/(Excel)Spreadsheets-As-Tools/</guid>
			</item>
		
			<item>
				<title>FormParam And Lists</title>
        <description>&lt;p&gt;
So I&#39;ve been working with a web application with &lt;code&gt;JAX-RS&lt;/code&gt; and &lt;code&gt;jQuery&lt;/code&gt; and working fine. However, I came across a problem that took quite some time to resolve.
&lt;/p&gt;

&lt;p&gt;
Using the &lt;code&gt;jQuery.ajax&lt;/code&gt; and it&#39;s variants, &lt;code&gt;jQuery.get&lt;/code&gt;, &lt;code&gt;jQuery.post&lt;/code&gt;, &lt;code&gt;jQuery.getJSON&lt;/code&gt;, has provided some ease of use in interacting with the backend web services. When making a lookup web service with &lt;code&gt;POST&lt;/code&gt;, the ideal glue code would to simply use &lt;code&gt;jQuery.post&lt;/code&gt; like so.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-javascript&quot;&gt;jQuery.post({
    url: &#39;my/url&#39;,
    data: { // Passing
        param1: 1,
        param2: &#39;b&#39;,
        param3: [1,2,3]
    }
});
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The &lt;code&gt;JAX-RS&lt;/code&gt; web service method to bind it would be
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-java&quot;&gt;@POST
public Response someEndpoint(@FormParam(&quot;param1&quot;) Long myLong, @FormParam(&quot;param2&quot;) String someString, @FormParam(&quot;param3&quot;) listOfLongs) {
    // Do something meaningful
    return Response.ok(42).build();
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Looks just about right, it sends the correct and sensible &lt;code&gt;POST&lt;/code&gt; request over the wire. However, the third parameter &lt;code&gt;listOfLongs&lt;/code&gt; when checked with a debugger always returns an empty list despite being correct with the browser&#39;s network debugger. The other parameters are passed correctly but why not the one with the array or list? Finding a solution took quite some time and pain as something simple as a list should be easy to pass.
&lt;/p&gt;

&lt;p&gt;
A workaround for this is to &lt;code&gt;JSON.stringify&lt;/code&gt; data and just send the &lt;code&gt;POST&lt;/code&gt; as a &lt;code&gt;JSON&lt;/code&gt; string and parsed as a object on the endpoint assuming a &lt;code&gt;JSON&lt;/code&gt; converter is in place. I think it is bad taste to do this since it&#39;s passing simple arguments, not a list of higher objects. There has to be a better way.
&lt;/p&gt;

&lt;p&gt;
In fact, there is. The solution is only a change for the backend. Can you spot the difference?
&lt;/p&gt;


&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-java&quot;&gt;@POST
public Response someEndpoint(@FormParam(&quot;param1&quot;) Long myLong, @FormParam(&quot;param2&quot;) String someString, @FormParam(&quot;param3[]&quot;) listOfLongs) {
    // Where&#39;s Waldo?
    return Response.ok(42).build();
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The trick is to make &lt;code&gt;param3&lt;/code&gt; into &lt;code&gt;param3[]&lt;/code&gt; and it will work as expected. I believe the reason is how the arrays are passed over the wire. When the &lt;code&gt;ajax&lt;/code&gt; call encodes the array value it appends &lt;code&gt;[]&lt;/code&gt; to its key or parameter, a transformation to distinguish atomic values with collection.
&lt;/p&gt;

&lt;p&gt;
Interesting but I didn&#39;t think it would affect the way it would be parsed or mapped with the endpoint. I believed that it would be mapped accordingly regardless of the implementation detail or whatever. The &lt;code&gt;[]&lt;/code&gt; looks somewhat out of place but this is definitely better than the workaround.
&lt;/p&gt;

&lt;p&gt;
Another day in the life of a monkey.
&lt;/p&gt;
</description>
				<pubDate>Thu, 03 Mar 2016 00:00:00 +0800</pubDate>
				<link>//kiko.gfjaru.com/2016/03/03/@FormParam-And-Lists/</link>
				<guid isPermaLink="true">//kiko.gfjaru.com/2016/03/03/@FormParam-And-Lists/</guid>
			</item>
		
			<item>
				<title>Setting Up org-mode And jekyll</title>
        <description>&lt;div id=&quot;outline-container-orgheadline1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline1&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline1&quot;&gt;
&lt;p&gt;
For my second blog post, I want to talk about how I setup this blog. I&#39;m using the Emacs &lt;a href=&quot;http://orgmode.org/&quot;&gt;org-mode&lt;/a&gt;, &lt;a href=&quot;http://jekyllrb.com/docs/home/&quot;&gt;jekyll&lt;/a&gt; and &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHubPages&lt;/a&gt; combo; this allows me write static web pages using the most versitile outliner I&#39;ve seen. How I found and made this decision escapes me but I do remember the three days of coding and praying for a miracle for the configuration to work despite how easy the tutorial seems.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgheadline5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline5&quot;&gt;Issues&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline5&quot;&gt;
&lt;p&gt;
Everything else seems easy except for a few technical details that I wasn&#39;t told. I&#39;m not sure which one fixed the configuration but these were things I did to make mine work.
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#orgheadline2&quot;&gt;org backward compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#orgheadline3&quot;&gt;External shadowing internal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#orgheadline4&quot;&gt;org-html string escaping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgheadline2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgheadline2&quot;&gt;org backward compatibility&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgheadline2&quot;&gt;
&lt;p&gt;
The builtin &lt;code&gt;org&lt;/code&gt; version that came with my Emacs was 7, the external &lt;code&gt;org&lt;/code&gt; package that can be downloaded was 8; the innocent upgrade made some compatibility issues with my configuration.
&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;org 7&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;org 8&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;line&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;org-html&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;ox-html&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;(require &#39;ox-html)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;org-publish&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;ox-publish&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;(require &#39;ox-publish)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;org-publish-org-to-html&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;org-html-publish-to-html&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;:publishing-function org-html-publish-to-html&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
So one thing that changed was the namespace change from &lt;code&gt;org&lt;/code&gt; to &lt;code&gt;ox&lt;/code&gt;. However, I thought that &lt;code&gt;ox&lt;/code&gt; was the outdated version not &lt;code&gt;org&lt;/code&gt; so it caused me some grief in that change. Same thing applied to &lt;code&gt;org-publish-org-to-html&lt;/code&gt;, since it was similar to &lt;code&gt;org-publish-attachment&lt;/code&gt; according to the tutorials; it would follow that it was the correct function to call but lightning strikes twice as the correct one is &lt;code&gt;org-html-publish-to-html&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Aside, there might be one more property to add to the setting. I am not sure if it is part of the change but it might be related.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
:with-toc nil
&lt;/pre&gt;

&lt;p&gt;
This property messes with the &lt;code&gt;Front Matter&lt;/code&gt; section since it preprends a table of contents on the post if not set to &lt;code&gt;nil&lt;/code&gt;. Just worth noting as well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgheadline3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgheadline3&quot;&gt;External shadowing internal&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgheadline3&quot;&gt;
&lt;p&gt;
To use the publishing features of &lt;code&gt;org&lt;/code&gt;, you had to download the &lt;code&gt;org-plus-contrib&lt;/code&gt; package which somehow depends on an external &lt;code&gt;org&lt;/code&gt; package to work. I didn&#39;t find this an issue elsewhere but it somehow conflicted with how &lt;code&gt;org-html&lt;/code&gt; publishes files. The thing it primarily solved I think was the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; that wrapped the exported &lt;code&gt;org&lt;/code&gt; file but I am not sure.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
;; Helper functions
(defun string/ends-with (s ending)
  &quot;Return non-nil if string S ends with ENDING.&quot;
  (cond ((&amp;gt;= (length s) (length ending))
         (let ((elength (length ending)))
           (string= (substring s (- 0 elength)) ending)))
            (t nil)))

(require &#39;cl)
(setq load-path
      (remove-if
       (lambda (text) (string/ends-with text &quot;org&quot;))
       load-path))
&lt;/pre&gt;

&lt;p&gt;
Aside from installing the said packages, I removed the builtin &lt;code&gt;org&lt;/code&gt; package from the &lt;code&gt;load-path&lt;/code&gt; which made &lt;code&gt;list-load-path-shadows&lt;/code&gt; clean. It also made it easier to configure extra &lt;code&gt;org&lt;/code&gt; packages and not have to hard code them when using an configuration under &lt;code&gt;org&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgheadline4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgheadline4&quot;&gt;org-html string escaping&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgheadline4&quot;&gt;
&lt;p&gt;
This issue is by far the most mischievous I had to track down.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
(setq org-html-special-string-regexps nil)
&lt;/pre&gt;

&lt;p&gt;
The variable &lt;code&gt;org-html-special-string-regexps&lt;/code&gt; causes the &lt;code&gt;---&lt;/code&gt; in the export to be converted to &lt;code&gt;&amp;amp;#x2014;&lt;/code&gt; effectively destroying the &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;Front Matter&lt;/a&gt; section which jekyll needs to process the page completely. I had to set it to &lt;code&gt;nil&lt;/code&gt; to process the section correctly.
&lt;/p&gt;

&lt;p&gt;
But this didn&#39;t fix it entirely since the whole exported file was wrapped with a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; rendering the whole file moot again.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgheadline6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline6&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline6&quot;&gt;
&lt;p&gt;
I hope you did not encounter the same problems I have because it is a pain. Writing a blog using &lt;code&gt;org&lt;/code&gt; is still awesome but I wish there was a tutorial that was up to date so this mess might have been avoided.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgheadline7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline7&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline7&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gorgnegre.com/linux/using-emacs-orgmode-to-blog-with-jekyll.html&quot;&gt;Gorg Negre&#39;s tutorial&lt;/a&gt; maybe what got me started in doing this but at the time it seem pretty outdated.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://orgmode.org/worg/org-tutorials/org-jekyll.html&quot;&gt;The official org-mode tutorial&lt;/a&gt; is excellent in setting up the site without &lt;code&gt;GitHubPages&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/docs/github-pages/&quot;&gt;The official jekyll GitHubPages tutorial&lt;/a&gt; is informative enough on the nuances of hosting the site in &lt;code&gt;GitHubPages&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://orgmode.org/manual/Configuration.html#Configuration&quot;&gt;The org-publish configuration page&lt;/a&gt; is a good reference on the publishing options.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://acaird.github.io/computers/2013/05/24/blogging-with-org-and-git/&quot;&gt;Andrew Caird&#39;s tutorial&lt;/a&gt; is the one I refer to for my workflow.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nickhigham.wordpress.com/2013/07/05/emacs-org-mode-version-8/&quot;&gt;Nick Higham&#39;s post on org-mode 8&lt;/a&gt; refers to a few compatibility issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
				<pubDate>Fri, 15 Jan 2016 00:00:00 +0800</pubDate>
				<link>//kiko.gfjaru.com/2016/01/15/Setting-Up-org-mode-And-jekyll/</link>
				<guid isPermaLink="true">//kiko.gfjaru.com/2016/01/15/Setting-Up-org-mode-And-jekyll/</guid>
			</item>
		
			<item>
				<title>Hello Log</title>
        <description>&lt;p&gt;
At last! I finally setup an org-mode Jekyll site in GitHub. After creating and deleting a bunch of GitHub repos, mindlessly making my Emacs configuration to an org-file, tackling the package initialization system, checking the source code of org-mode and more; I was able to pinit down.
&lt;/p&gt;

&lt;p&gt;
Now that I have a blog setup, what to do now? My plan is to make to blog post every week, at least one on a weekend and weekday. What am I going to talk about? Well, random to be precise. Not really but it somewhat is, I will talk about my experiences in developing, coding and whatever the fudge I want. Except the last part, I simply want to share my experiences, maybe it will help mankind or myself.
&lt;/p&gt;

&lt;p&gt;
But I still have a long way to go, I have to customize this site from it&#39;s base, manage how to use org-mode, learn how to format the post, add some more functionality and so forth. For now, this is a good start.
&lt;/p&gt;
</description>
				<pubDate>Wed, 13 Jan 2016 00:00:00 +0800</pubDate>
				<link>//kiko.gfjaru.com/2016/01/13/Hello-Log/</link>
				<guid isPermaLink="true">//kiko.gfjaru.com/2016/01/13/Hello-Log/</guid>
			</item>
		
	</channel>
</rss>
