#+OPTIONS: H:2 num:nil tags:nil timestamps:t
#+BEGIN_EXPORT html
---
title: Setting Up org-mode And jekyll
tagline: It seemed easy enough to do, but the details.
layout: post
author: Francis Murillo
categories: Hacker, jekll, org
blog-category: hacker
tags:
- jekyll
---
#+END_EXPORT

* Introduction
  For my second blog post, I want to talk about how I setup this blog. I'm using the Emacs [[http://orgmode.org/][org-mode]], [[http://jekyllrb.com/docs/home/][jekyll]] and [[https://pages.github.com/][GitHubPages]] combo; this allows me write static web pages using the most versitile outliner I've seen. How I found and made this decision escapes me but I do remember the three days of coding and praying for a miracle for the configuration to work despite how easy the tutorial seems.

* Issues
  Everything else seems easy except for a few technical details that I wasn't told. I'm not sure which one fixed the configuration but these were things I did to make mine work.

  - [[org backward compatibility]]
  - [[External shadowing internal]]
  - [[org-html string escaping]]

** org backward compatibility
   The builtin =org= version that came with my Emacs was 7, the external =org= package that can be downloaded was 8; the innocent upgrade made some compatibility issues with my configuration.

   | org 7                   | org 8                    | line                                            |
   |-------------------------+--------------------------+-------------------------------------------------|
   | org-html                | ox-html                  | =(require 'ox-html)=                            |
   | org-publish             | ox-publish               | =(require 'ox-publish)=                         |
   | org-publish-org-to-html | org-html-publish-to-html | =:publishing-function org-html-publish-to-html= |

   So one thing that changed was the namespace change from =org= to =ox=. However, I thought that =ox= was the outdated version not =org= so it caused me some grief in that change. Same thing applied to =org-publish-org-to-html=, since it was similar to =org-publish-attachment= according to the tutorials; it would follow that it was the correct function to call but lightning strikes twice as the correct one is =org-html-publish-to-html=.

   Aside, there might be one more property to add to the setting. I am not sure if it is part of the change but it might be related.

   #+BEGIN_EXAMPLE
             :with-toc nil
   #+END_EXAMPLE

   This property messes with the =Front Matter= section since it preprends a table of contents on the post if not set to =nil=. Just worth noting as well.

** External shadowing internal
   To use the publishing features of =org=, you had to download the =org-plus-contrib= package which somehow depends on an external =org= package to work. I didn't find this an issue elsewhere but it somehow conflicted with how =org-html= publishes files. The thing it primarily solved I think was the =<div>= that wrapped the exported =org= file but I am not sure.

   #+BEGIN_EXAMPLE
     ;; Helper functions
     (defun string/ends-with (s ending)
       "Return non-nil if string S ends with ENDING."
       (cond ((>= (length s) (length ending))
              (let ((elength (length ending)))
                (string= (substring s (- 0 elength)) ending)))
                 (t nil)))

     (require 'cl)
     (setq load-path
           (remove-if
            (lambda (text) (string/ends-with text "org"))
            load-path))
   #+END_EXAMPLE

   Aside from installing the said packages, I removed the builtin =org= package from the =load-path= which made =list-load-path-shadows= clean. It also made it easier to configure extra =org= packages and not have to hard code them when using an configuration under =org=.

** org-html string escaping
   This issue is by far the most mischievous I had to track down.

   #+BEGIN_EXAMPLE
     (setq org-html-special-string-regexps nil)
   #+END_EXAMPLE

   The variable =org-html-special-string-regexps= causes the =---= in the export to be converted to =&#x2014;= effectively destroying the [[http://jekyllrb.com/docs/frontmatter/][Front Matter]] section which jekyll needs to process the page completely. I had to set it to =nil= to process the section correctly.

   But this didn't fix it entirely since the whole exported file was wrapped with a =<div>= rendering the whole file moot again.

* Conclusion
  I hope you did not encounter the same problems I have because it is a pain. Writing a blog using =org= is still awesome but I wish there was a tutorial that was up to date so this mess might have been avoided.

* Links
  - [[http://www.gorgnegre.com/linux/using-emacs-orgmode-to-blog-with-jekyll.html][Gorg Negre's tutorial]] maybe what got me started in doing this but at the time it seem pretty outdated.
  - [[http://orgmode.org/worg/org-tutorials/org-jekyll.html][The official org-mode tutorial]] is excellent in setting up the site without =GitHubPages=.
  - [[http://jekyllrb.com/docs/github-pages/][The official jekyll GitHubPages tutorial]] is informative enough on the nuances of hosting the site in =GitHubPages=.
  - [[http://orgmode.org/manual/Configuration.html#Configuration][The org-publish configuration page]] is a good reference on the publishing options.
  - [[https://acaird.github.io/computers/2013/05/24/blogging-with-org-and-git/][Andrew Caird's tutorial]] is the one I refer to for my workflow.
  - [[https://nickhigham.wordpress.com/2013/07/05/emacs-org-mode-version-8/][Nick Higham's post on org-mode 8]] refers to a few compatibility issues.
